---
description: Use when writing or updating system architecture documentation to maintain low-maintenance, high-value docs
globs: 
alwaysApply: false
---
# agent-requested/documentation.mdc

# Documentation Standards

## [CRITICAL] Update Triggers
- Update documentation ONLY for user flow changes, integration point changes, system boundary changes, or architecture decisions
- NEVER update for bug fixes, performance optimizations, UI tweaks, error messages, or code cleanup
TEST: Does this change affect how systems integrate or user flows work?

## [CRITICAL] Documentation Scope
- Include core flow (happy path), integration contracts, system boundaries, critical dependencies, architecture decisions
- Exclude specific error messages, function implementations, edge cases, TODO items, file structure details
TEST: Would a new developer need this to understand system architecture?

## [CRITICAL] Three-Question Filter
Before adding content to docs, verify:
1. "Would a new developer need this to understand the system?"
2. "If this integration broke, would this doc help them fix it?"
3. "Will this detail still be accurate in 6 months?"
TEST: If any answer is "no", put it in code comments instead

## [IMPORTANT] Required Structure Template
Use this exact structure for all architecture docs:
```markdown
# [System Name] Architecture
## Quick Reference
## Core Flow (Happy Path)
## Integration Contracts
## Critical Dependencies
## System Boundaries
## Architecture Decisions
## For Developers
```
TEST: Documentation follows template structure exactly

## [IMPORTANT] Maintenance Discipline
- Use quarterly review process to check accuracy
- Add living references in code: `// ARCHITECTURE: See notes/system-name.md`
- Maintain single responsibility: architecture docs vs code comments vs audit findings
TEST: Documentation can be reviewed in under 30 minutes quarterly

## [PREFERRED] Anti-Patterns
- NEVER document implementation details that change frequently
- NEVER create separate docs for every component
- NEVER copy code structure into documentation structure
- NEVER document temporary solutions or workarounds
TEST: Documentation focuses on stable contracts, not volatile implementation

## [PREFERRED] Success Patterns
- Focus on contracts that rarely change
- Document decisions and alternatives considered
- Use architecture diagrams over code walkthroughs
- Link to config files for current values
TEST: Documentation describes WHY decisions were made, not just WHAT exists

CORRECT: "We chose external Stripe checkout to reduce PCI compliance scope"
INCORRECT: "The checkout button calls useStripeCheckout hook"

CORRECT: "Authentication required for all user data access"
INCORRECT: "The auth hook is imported from @/contexts/AuthContext"
