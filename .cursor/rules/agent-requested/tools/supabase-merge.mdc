---
description: 
globs: 
alwaysApply: false
---
## Can You Push Preview Branch Changes to Main in Supabase?

Yes, you can push changes made in a Supabase preview branch—including all database (table) changes and Edge Function updates—to your main branch, but there are important details and best practices to follow.

---

**How It Works**

- **Supabase Branching** mirrors Git branching: each branch (including preview branches) is a full, isolated Supabase environment with its own database, API keys, Edge Functions, etc.[1][2][3]
- **Database Changes**: Any schema changes (tables, columns, etc.) are tracked as migration files in your repo under `supabase/migrations`. When you merge a preview branch (typically via a GitHub Pull Request) into main, the migrations from the preview branch are applied to the production (main) database.[1][2][3]
- **Edge Functions**: Edge Functions in `supabase/functions` are also supported by branching. When you merge your preview branch into main, any new or updated Edge Functions are deployed to production automatically.[3]

---

## Recommended Workflow

1. **Develop on Preview Branch**
   - Make your schema changes (tables, columns, etc.) and generate migration files using the Supabase CLI or Dashboard.[1][4][2]
   - Create or update Edge Functions in the `supabase/functions` directory.[3]
2. **Test in Preview Environment**
   - Preview branches are isolated, so test your changes (including Edge Functions) safely.[1][2][3]
3. **Merge to Main**
   - When ready, merge your preview branch (via PR) into main. Supabase will:
     - Apply all migration files to the production database.
     - Deploy all Edge Function changes to production.[1][2][3]

---

## Important Notes & Best Practices

- **Migration Files Are the Source of Truth**: Only changes captured in migration files and committed to your repo will be applied to production. Manual changes in the dashboard that are not captured in migrations will not be transferred.[1][5][4][2]
- **Edge Functions Must Be in the Repo**: Functions in the `supabase/functions` directory are deployed automatically on branch merges. Ensure your function code is committed.[3]
- **Testing**: Always test migrations and Edge Functions in your preview branch before merging to avoid breaking production.[6]
- **Seeding Data**: Use a `seed.sql` file if you want to seed your preview branch with sample data. This is not automatically pushed to production but is useful for testing.[1][2]

---

## Summary Table

| Change Type         | How to Push to Main         | Notes                                            |
|---------------------|----------------------------|--------------------------------------------------|
| Table/Schema Changes| Merge migration files       | Use Supabase CLI to generate and commit migrations|
| Edge Functions      | Merge function code         | Commit to `supabase/functions`                   |
| Seed Data           | Not pushed to main          | Used for preview/testing only                    |

---

## References

> "When you merge a Pull Request into your main Git branch, Supabase will run your database migrations inside your Production database... Branches are isolated instances, each with every Supabase feature: a Postgres database, Auth, File Storage, Realtime, Edge Functions, and Data APIs." [2][3]

> "Branching now deploys your Edge Functions along with your migrations. Any Functions added or changed in your ./supabase/functions will automatically be deployed without any extra configuration." [3]

---

## What You Cannot Do

- **You cannot "push" unsaved dashboard changes**: Only what is tracked in migration files and function code will be transferred.
- **You cannot merge data**: Only schema and function changes are merged, not runtime data or records.

---

## What To Do

- Use the Supabase CLI and commit all migration and function changes.
- Merge your preview branch into main via GitHub PR.
- Supabase will handle applying migrations and deploying Edge Functions to production automatically.[1][2][3]

If you follow this workflow, all your table changes and Edge Function updates from the preview branch will be correctly pushed to main.

[1] https://supabase.com/docs/guides/deployment/branching
[2] https://supabase.com/blog/supabase-branching
[3] https://supabase.com/blog/branching-publicly-available
[4] https://supabase.com/docs/guides/local-development/overview
[5] https://supabase.com/docs/guides/deployment/database-migrations
[6] https://www.linkedin.com/posts/vueschool_best-practices-for-database-migrations-supabase-activity-7331324912583819264-csJ_
[7] https://github.com/orgs/supabase/discussions/28987
[8] https://supabase.com/docs/guides/functions/quickstart
[9] https://dev.to/hussain101/supabase-edge-functions-4o1
[10] https://vueschool.io/articles/vuejs-tutorials/how-to-create-supabase-database-migration-files-in-vue-js/
[11] https://github.com/orgs/supabase/discussions/18937
[12] https://www.reddit.com/r/Supabase/comments/1f5w006/supabase_testing_in_preview_mode/
[13] https://supabase.com/features/branching
[14] https://supabase.com/docs/guides/platform/manage-your-usage/branching
[15] https://www.reddit.com/r/Supabase/comments/1f7w0xp/what_is_the_best_practice_when_it_comes_to/
[16] https://github.com/orgs/supabase/discussions/542
[17] https://bryntum.com/blog/how-to-use-supabase-edge-functions-to-build-a-bryntum-gantt-chart-with-react/