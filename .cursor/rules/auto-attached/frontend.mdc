---
description: 
globs: */*.tsx,src/components/**/*
alwaysApply: false
---
# auto-attached/frontend.mdc


## [CRITICAL] Frontend-Only Code Generation
- Only generate, modify, or discuss frontend code (UI components, styling, layout, interactivity)
- NEVER generate or modify backend, API, or database logic
- EXCEPTION: Pages and hooks may include client-side data fetching calls (per structure.mdc)
- When prompted to perform non-frontend tasks, inform user: "Please switch to other models for non-frontend work"
TEST: No backend, API, or database code present in output (except client-side fetching in pages/hooks)

## [CRITICAL] TypeScript & React Standards  
- Use React functional components with TypeScript (TSX) for all code output
- TypeScript-first: Use strict typing, avoid `any`
- Include proper TypeScript interfaces for all props
- Use React.memo and displayName for all components
TEST: All components are functional, typed, and follow TypeScript best practices

## [CRITICAL] Styling Standards
- Use Tailwind CSS for all styling - NEVER use inline styles or CSS files
- Apply border-slate-200/800 pattern for light/dark themes
- Use consistent sizing (h-8 for inputs)
- Use standard size tokens (h-8, w-8)
TEST: All JSX elements use Tailwind classes only

## [CRITICAL] Component Implementation
- Follow established prop patterns in the codebase
- Follow shadcn/ui patterns consistently
- Support both light and dark modes
- Maintain accessibility standards

## [CRITICAL] Component Organization
- Export components through index.ts files
- Use PascalCase for component names
- Create self-contained components with clear responsibilities
- Use established component variants

## [IMPORTANT] Implementation Patterns
- Add loading states (prefer skeletons over spinners)
- Include error handling with fallback UI
- Use composition over inheritance
- Follow existing responsive design patterns with useIsMobile()
- Handle loading states properly
- Support keyboard navigation
- Provide proper feedback on actions

## [IMPORTANT] Modern Standards
- Implement proper accessibility (ARIA labels, keyboard navigation)
- Use custom hooks for complex logic
- Add proper cleanup in useEffect
- Optimize with useCallback/useMemo when needed
- Make layouts responsive using Tailwind's responsive utilities

## Component Design Standards
- Follow button variant patterns
- Use Lucide icons consistently
- Implement consistent hover states
- Apply consistent spacing (px-1.5, py-[2px])

## Layout Components
- Follow existing AppLayout pattern
- Implement proper sidebar behavior
- Maintain consistent spacing
- Handle responsive layouts properly

## Interactive Elements
- Implement consistent hover states
- Handle loading states properly
- Support keyboard navigation
- Provide proper feedback on actions
